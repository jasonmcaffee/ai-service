/* tslint:disable */
/* eslint-disable */
/**
 * AI API
 * API to manage to interact with AI
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AiStatusUpdate } from './AiStatusUpdate';
import {
    AiStatusUpdateFromJSON,
    AiStatusUpdateFromJSONTyped,
    AiStatusUpdateToJSON,
    AiStatusUpdateToJSONTyped,
} from './AiStatusUpdate';

/**
 * 
 * @export
 * @interface StatusTopic
 */
export interface StatusTopic {
    /**
     * 
     * @type {Array<AiStatusUpdate>}
     * @memberof StatusTopic
     */
    statusUpdates: Array<AiStatusUpdate>;
    /**
     * 
     * @type {boolean}
     * @memberof StatusTopic
     */
    isTopicOpen: boolean;
    /**
     * 
     * @type {number}
     * @memberof StatusTopic
     */
    dateOfLastStatusUpdate: number;
    /**
     * 
     * @type {object}
     * @memberof StatusTopic
     */
    childStatusTopics: object;
}

/**
 * Check if a given object implements the StatusTopic interface.
 */
export function instanceOfStatusTopic(value: object): value is StatusTopic {
    if (!('statusUpdates' in value) || value['statusUpdates'] === undefined) return false;
    if (!('isTopicOpen' in value) || value['isTopicOpen'] === undefined) return false;
    if (!('dateOfLastStatusUpdate' in value) || value['dateOfLastStatusUpdate'] === undefined) return false;
    if (!('childStatusTopics' in value) || value['childStatusTopics'] === undefined) return false;
    return true;
}

export function StatusTopicFromJSON(json: any): StatusTopic {
    return StatusTopicFromJSONTyped(json, false);
}

export function StatusTopicFromJSONTyped(json: any, ignoreDiscriminator: boolean): StatusTopic {
    if (json == null) {
        return json;
    }
    return {
        
        'statusUpdates': ((json['statusUpdates'] as Array<any>).map(AiStatusUpdateFromJSON)),
        'isTopicOpen': json['isTopicOpen'],
        'dateOfLastStatusUpdate': json['dateOfLastStatusUpdate'],
        'childStatusTopics': json['childStatusTopics'],
    };
}

export function StatusTopicToJSON(json: any): StatusTopic {
    return StatusTopicToJSONTyped(json, false);
}

export function StatusTopicToJSONTyped(value?: StatusTopic | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'statusUpdates': ((value['statusUpdates'] as Array<any>).map(AiStatusUpdateToJSON)),
        'isTopicOpen': value['isTopicOpen'],
        'dateOfLastStatusUpdate': value['dateOfLastStatusUpdate'],
        'childStatusTopics': value['childStatusTopics'],
    };
}

