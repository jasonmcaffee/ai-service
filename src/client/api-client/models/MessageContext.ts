/* tslint:disable */
/* eslint-disable */
/**
 * AI API
 * API to manage to interact with AI
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ModelOrDatasource } from './ModelOrDatasource';
import {
    ModelOrDatasourceFromJSON,
    ModelOrDatasourceFromJSONTyped,
    ModelOrDatasourceToJSON,
    ModelOrDatasourceToJSONTyped,
} from './ModelOrDatasource';

/**
 * 
 * @export
 * @interface MessageContext
 */
export interface MessageContext {
    /**
     * 
     * @type {string}
     * @memberof MessageContext
     */
    textWithoutTags: string;
    /**
     * 
     * @type {string}
     * @memberof MessageContext
     */
    originalText: string;
    /**
     * 
     * @type {Array<ModelOrDatasource>}
     * @memberof MessageContext
     */
    models: Array<ModelOrDatasource>;
    /**
     * 
     * @type {Array<ModelOrDatasource>}
     * @memberof MessageContext
     */
    datasources: Array<ModelOrDatasource>;
}

/**
 * Check if a given object implements the MessageContext interface.
 */
export function instanceOfMessageContext(value: object): value is MessageContext {
    if (!('textWithoutTags' in value) || value['textWithoutTags'] === undefined) return false;
    if (!('originalText' in value) || value['originalText'] === undefined) return false;
    if (!('models' in value) || value['models'] === undefined) return false;
    if (!('datasources' in value) || value['datasources'] === undefined) return false;
    return true;
}

export function MessageContextFromJSON(json: any): MessageContext {
    return MessageContextFromJSONTyped(json, false);
}

export function MessageContextFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageContext {
    if (json == null) {
        return json;
    }
    return {
        
        'textWithoutTags': json['textWithoutTags'],
        'originalText': json['originalText'],
        'models': ((json['models'] as Array<any>).map(ModelOrDatasourceFromJSON)),
        'datasources': ((json['datasources'] as Array<any>).map(ModelOrDatasourceFromJSON)),
    };
}

export function MessageContextToJSON(json: any): MessageContext {
    return MessageContextToJSONTyped(json, false);
}

export function MessageContextToJSONTyped(value?: MessageContext | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'textWithoutTags': value['textWithoutTags'],
        'originalText': value['originalText'],
        'models': ((value['models'] as Array<any>).map(ModelOrDatasourceToJSON)),
        'datasources': ((value['datasources'] as Array<any>).map(ModelOrDatasourceToJSON)),
    };
}

