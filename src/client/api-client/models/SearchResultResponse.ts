/* tslint:disable */
/* eslint-disable */
/**
 * AI API
 * API to manage to interact with AI
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SearchResult } from './SearchResult';
import {
    SearchResultFromJSON,
    SearchResultFromJSONTyped,
    SearchResultToJSON,
    SearchResultToJSONTyped,
} from './SearchResult';

/**
 * 
 * @export
 * @interface SearchResultResponse
 */
export interface SearchResultResponse {
    /**
     * 
     * @type {string}
     * @memberof SearchResultResponse
     */
    query: string;
    /**
     * 
     * @type {Array<SearchResult>}
     * @memberof SearchResultResponse
     */
    searchResults: Array<SearchResult>;
}

/**
 * Check if a given object implements the SearchResultResponse interface.
 */
export function instanceOfSearchResultResponse(value: object): value is SearchResultResponse {
    if (!('query' in value) || value['query'] === undefined) return false;
    if (!('searchResults' in value) || value['searchResults'] === undefined) return false;
    return true;
}

export function SearchResultResponseFromJSON(json: any): SearchResultResponse {
    return SearchResultResponseFromJSONTyped(json, false);
}

export function SearchResultResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchResultResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'query': json['query'],
        'searchResults': ((json['searchResults'] as Array<any>).map(SearchResultFromJSON)),
    };
}

export function SearchResultResponseToJSON(json: any): SearchResultResponse {
    return SearchResultResponseToJSONTyped(json, false);
}

export function SearchResultResponseToJSONTyped(value?: SearchResultResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'query': value['query'],
        'searchResults': ((value['searchResults'] as Array<any>).map(SearchResultToJSON)),
    };
}

