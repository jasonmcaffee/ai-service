/* tslint:disable */
/* eslint-disable */
/**
 * AI API
 * API to manage to interact with AI
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Image } from './Image';
import {
    ImageFromJSON,
    ImageFromJSONTyped,
    ImageToJSON,
    ImageToJSONTyped,
} from './Image';

/**
 * 
 * @export
 * @interface PagedImages
 */
export interface PagedImages {
    /**
     * 
     * @type {number}
     * @memberof PagedImages
     */
    pageNumber: number;
    /**
     * 
     * @type {number}
     * @memberof PagedImages
     */
    numberOfImagesPerPage: number;
    /**
     * 
     * @type {number}
     * @memberof PagedImages
     */
    remainingPages: number;
    /**
     * 
     * @type {number}
     * @memberof PagedImages
     */
    remainingImages: number;
    /**
     * 
     * @type {Array<Image>}
     * @memberof PagedImages
     */
    images: Array<Image>;
}

/**
 * Check if a given object implements the PagedImages interface.
 */
export function instanceOfPagedImages(value: object): value is PagedImages {
    if (!('pageNumber' in value) || value['pageNumber'] === undefined) return false;
    if (!('numberOfImagesPerPage' in value) || value['numberOfImagesPerPage'] === undefined) return false;
    if (!('remainingPages' in value) || value['remainingPages'] === undefined) return false;
    if (!('remainingImages' in value) || value['remainingImages'] === undefined) return false;
    if (!('images' in value) || value['images'] === undefined) return false;
    return true;
}

export function PagedImagesFromJSON(json: any): PagedImages {
    return PagedImagesFromJSONTyped(json, false);
}

export function PagedImagesFromJSONTyped(json: any, ignoreDiscriminator: boolean): PagedImages {
    if (json == null) {
        return json;
    }
    return {
        
        'pageNumber': json['pageNumber'],
        'numberOfImagesPerPage': json['numberOfImagesPerPage'],
        'remainingPages': json['remainingPages'],
        'remainingImages': json['remainingImages'],
        'images': ((json['images'] as Array<any>).map(ImageFromJSON)),
    };
}

export function PagedImagesToJSON(json: any): PagedImages {
    return PagedImagesToJSONTyped(json, false);
}

export function PagedImagesToJSONTyped(value?: PagedImages | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'pageNumber': value['pageNumber'],
        'numberOfImagesPerPage': value['numberOfImagesPerPage'],
        'remainingPages': value['remainingPages'],
        'remainingImages': value['remainingImages'],
        'images': ((value['images'] as Array<any>).map(ImageToJSON)),
    };
}

