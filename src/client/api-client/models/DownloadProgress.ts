/* tslint:disable */
/* eslint-disable */
/**
 * AI API
 * API to manage to interact with AI
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DownloadProgress
 */
export interface DownloadProgress {
    /**
     * 
     * @type {string}
     * @memberof DownloadProgress
     */
    fileName: string;
    /**
     * 
     * @type {string}
     * @memberof DownloadProgress
     */
    modelId: string;
    /**
     * 
     * @type {number}
     * @memberof DownloadProgress
     */
    percentComplete: number;
    /**
     * 
     * @type {number}
     * @memberof DownloadProgress
     */
    downloadSpeed: number;
    /**
     * 
     * @type {number}
     * @memberof DownloadProgress
     */
    estimatedSecondsRemaining: number;
}

/**
 * Check if a given object implements the DownloadProgress interface.
 */
export function instanceOfDownloadProgress(value: object): value is DownloadProgress {
    if (!('fileName' in value) || value['fileName'] === undefined) return false;
    if (!('modelId' in value) || value['modelId'] === undefined) return false;
    if (!('percentComplete' in value) || value['percentComplete'] === undefined) return false;
    if (!('downloadSpeed' in value) || value['downloadSpeed'] === undefined) return false;
    if (!('estimatedSecondsRemaining' in value) || value['estimatedSecondsRemaining'] === undefined) return false;
    return true;
}

export function DownloadProgressFromJSON(json: any): DownloadProgress {
    return DownloadProgressFromJSONTyped(json, false);
}

export function DownloadProgressFromJSONTyped(json: any, ignoreDiscriminator: boolean): DownloadProgress {
    if (json == null) {
        return json;
    }
    return {
        
        'fileName': json['fileName'],
        'modelId': json['modelId'],
        'percentComplete': json['percentComplete'],
        'downloadSpeed': json['downloadSpeed'],
        'estimatedSecondsRemaining': json['estimatedSecondsRemaining'],
    };
}

export function DownloadProgressToJSON(json: any): DownloadProgress {
    return DownloadProgressToJSONTyped(json, false);
}

export function DownloadProgressToJSONTyped(value?: DownloadProgress | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'fileName': value['fileName'],
        'modelId': value['modelId'],
        'percentComplete': value['percentComplete'],
        'downloadSpeed': value['downloadSpeed'],
        'estimatedSecondsRemaining': value['estimatedSecondsRemaining'],
    };
}

