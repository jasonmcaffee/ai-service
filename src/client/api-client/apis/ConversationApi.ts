/* tslint:disable */
/* eslint-disable */
/**
 * AI API
 * API to manage to interact with AI
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Conversation,
  CreateConversation,
  CreateMessage,
} from '../models/index';
import {
    ConversationFromJSON,
    ConversationToJSON,
    CreateConversationFromJSON,
    CreateConversationToJSON,
    CreateMessageFromJSON,
    CreateMessageToJSON,
} from '../models/index';

export interface ConversationControllerAddMessageRequest {
    conversationId: string;
    createMessage: CreateMessage;
}

export interface ConversationControllerCreateConversationRequest {
    createConversation: CreateConversation;
}

export interface ConversationControllerDeleteConversationRequest {
    conversationId: string;
}

export interface ConversationControllerGetConversationRequest {
    conversationId: string;
}

export interface ConversationControllerUpdateConversationRequest {
    conversationId: string;
    conversation: Conversation;
}

/**
 * 
 */
export class ConversationApi extends runtime.BaseAPI {

    /**
     * Add a message to a conversation
     */
    async conversationControllerAddMessageRaw(requestParameters: ConversationControllerAddMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateMessage>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling conversationControllerAddMessage().'
            );
        }

        if (requestParameters['createMessage'] == null) {
            throw new runtime.RequiredError(
                'createMessage',
                'Required parameter "createMessage" was null or undefined when calling conversationControllerAddMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/conversations/{conversationId}/messages`.replace(`{${"conversationId"}}`, encodeURIComponent(String(requestParameters['conversationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMessageToJSON(requestParameters['createMessage']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateMessageFromJSON(jsonValue));
    }

    /**
     * Add a message to a conversation
     */
    async conversationControllerAddMessage(requestParameters: ConversationControllerAddMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateMessage> {
        const response = await this.conversationControllerAddMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new conversation
     */
    async conversationControllerCreateConversationRaw(requestParameters: ConversationControllerCreateConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createConversation'] == null) {
            throw new runtime.RequiredError(
                'createConversation',
                'Required parameter "createConversation" was null or undefined when calling conversationControllerCreateConversation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/conversations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateConversationToJSON(requestParameters['createConversation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new conversation
     */
    async conversationControllerCreateConversation(requestParameters: ConversationControllerCreateConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.conversationControllerCreateConversationRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a conversation
     */
    async conversationControllerDeleteConversationRaw(requestParameters: ConversationControllerDeleteConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling conversationControllerDeleteConversation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/conversations/{conversationId}`.replace(`{${"conversationId"}}`, encodeURIComponent(String(requestParameters['conversationId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a conversation
     */
    async conversationControllerDeleteConversation(requestParameters: ConversationControllerDeleteConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.conversationControllerDeleteConversationRaw(requestParameters, initOverrides);
    }

    /**
     * Get conversation by ID
     */
    async conversationControllerGetConversationRaw(requestParameters: ConversationControllerGetConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Conversation>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling conversationControllerGetConversation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/conversations/{conversationId}`.replace(`{${"conversationId"}}`, encodeURIComponent(String(requestParameters['conversationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationFromJSON(jsonValue));
    }

    /**
     * Get conversation by ID
     */
    async conversationControllerGetConversation(requestParameters: ConversationControllerGetConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Conversation> {
        const response = await this.conversationControllerGetConversationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing conversation
     */
    async conversationControllerUpdateConversationRaw(requestParameters: ConversationControllerUpdateConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['conversationId'] == null) {
            throw new runtime.RequiredError(
                'conversationId',
                'Required parameter "conversationId" was null or undefined when calling conversationControllerUpdateConversation().'
            );
        }

        if (requestParameters['conversation'] == null) {
            throw new runtime.RequiredError(
                'conversation',
                'Required parameter "conversation" was null or undefined when calling conversationControllerUpdateConversation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/conversations/{conversationId}`.replace(`{${"conversationId"}}`, encodeURIComponent(String(requestParameters['conversationId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ConversationToJSON(requestParameters['conversation']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update an existing conversation
     */
    async conversationControllerUpdateConversation(requestParameters: ConversationControllerUpdateConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.conversationControllerUpdateConversationRaw(requestParameters, initOverrides);
    }

}
