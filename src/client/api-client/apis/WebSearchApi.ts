/* tslint:disable */
/* eslint-disable */
/**
 * AI API
 * API to manage to interact with AI
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetPageContentsResponse,
  SearchResultResponse,
} from '../models/index';
import {
    GetPageContentsResponseFromJSON,
    GetPageContentsResponseToJSON,
    SearchResultResponseFromJSON,
    SearchResultResponseToJSON,
} from '../models/index';

export interface GetPageContentsRequest {
    url: string;
}

export interface StreamSummarizeUrlRequest {
    url: string;
    searchQueryContext?: string;
}

export interface StreamWebSearchRequest {
    query: string;
    startingPage: number;
    maxPages: number;
}

export interface WebSearchRequest {
    query: string;
    startingPage: number;
    maxPages: number;
}

/**
 * 
 */
export class WebSearchApi extends runtime.BaseAPI {

    /**
     * fetch the contents of the page.
     */
    async getPageContentsRaw(requestParameters: GetPageContentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPageContentsResponse>> {
        if (requestParameters['url'] == null) {
            throw new runtime.RequiredError(
                'url',
                'Required parameter "url" was null or undefined when calling getPageContents().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['url'] != null) {
            queryParameters['url'] = requestParameters['url'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/webSearch/getPageContents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPageContentsResponseFromJSON(jsonValue));
    }

    /**
     * fetch the contents of the page.
     */
    async getPageContents(url: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPageContentsResponse> {
        const response = await this.getPageContentsRaw({ url: url }, initOverrides);
        return await response.value();
    }

    /**
     * stop the current stream for a member
     */
    async stopSummarizingUrlRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/webSearch/stopSummarizingUrl`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * stop the current stream for a member
     */
    async stopSummarizingUrl(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stopSummarizingUrlRaw(initOverrides);
    }

    /**
     * Stream a summary based on url
     */
    async streamSummarizeUrlRaw(requestParameters: StreamSummarizeUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['url'] == null) {
            throw new runtime.RequiredError(
                'url',
                'Required parameter "url" was null or undefined when calling streamSummarizeUrl().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['url'] != null) {
            queryParameters['url'] = requestParameters['url'];
        }

        if (requestParameters['searchQueryContext'] != null) {
            queryParameters['searchQueryContext'] = requestParameters['searchQueryContext'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/webSearch/streamSummarizeUrl`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Stream a summary based on url
     */
    async streamSummarizeUrl(url: string, searchQueryContext?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.streamSummarizeUrlRaw({ url: url, searchQueryContext: searchQueryContext }, initOverrides);
        return await response.value();
    }

    /**
     * Stream a message based on a prompt
     */
    async streamWebSearchRaw(requestParameters: StreamWebSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter "query" was null or undefined when calling streamWebSearch().'
            );
        }

        if (requestParameters['startingPage'] == null) {
            throw new runtime.RequiredError(
                'startingPage',
                'Required parameter "startingPage" was null or undefined when calling streamWebSearch().'
            );
        }

        if (requestParameters['maxPages'] == null) {
            throw new runtime.RequiredError(
                'maxPages',
                'Required parameter "maxPages" was null or undefined when calling streamWebSearch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['startingPage'] != null) {
            queryParameters['startingPage'] = requestParameters['startingPage'];
        }

        if (requestParameters['maxPages'] != null) {
            queryParameters['maxPages'] = requestParameters['maxPages'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/webSearch/streamWebSearch`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Stream a message based on a prompt
     */
    async streamWebSearch(query: string, startingPage: number, maxPages: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.streamWebSearchRaw({ query: query, startingPage: startingPage, maxPages: maxPages }, initOverrides);
        return await response.value();
    }

    /**
     * search the web
     */
    async webSearchRaw(requestParameters: WebSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResultResponse>> {
        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter "query" was null or undefined when calling webSearch().'
            );
        }

        if (requestParameters['startingPage'] == null) {
            throw new runtime.RequiredError(
                'startingPage',
                'Required parameter "startingPage" was null or undefined when calling webSearch().'
            );
        }

        if (requestParameters['maxPages'] == null) {
            throw new runtime.RequiredError(
                'maxPages',
                'Required parameter "maxPages" was null or undefined when calling webSearch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['startingPage'] != null) {
            queryParameters['startingPage'] = requestParameters['startingPage'];
        }

        if (requestParameters['maxPages'] != null) {
            queryParameters['maxPages'] = requestParameters['maxPages'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/webSearch/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchResultResponseFromJSON(jsonValue));
    }

    /**
     * search the web
     */
    async webSearch(query: string, startingPage: number, maxPages: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResultResponse> {
        const response = await this.webSearchRaw({ query: query, startingPage: startingPage, maxPages: maxPages }, initOverrides);
        return await response.value();
    }

}
