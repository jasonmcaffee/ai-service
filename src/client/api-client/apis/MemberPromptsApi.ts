/* tslint:disable */
/* eslint-disable */
/**
 * AI API
 * API to manage to interact with AI
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateMemberPrompt,
  MemberPrompt,
  UpdateMemberPrompt,
} from '../models/index';
import {
    CreateMemberPromptFromJSON,
    CreateMemberPromptToJSON,
    MemberPromptFromJSON,
    MemberPromptToJSON,
    UpdateMemberPromptFromJSON,
    UpdateMemberPromptToJSON,
} from '../models/index';

export interface CreatePromptRequest {
    createMemberPrompt: CreateMemberPrompt;
}

export interface DeletePromptRequest {
    promptId: string;
}

export interface GetPromptByIdRequest {
    promptId: string;
}

export interface GetPromptByNameRequest {
    promptName: string;
}

export interface UpdatePromptRequest {
    promptId: string;
    updateMemberPrompt: UpdateMemberPrompt;
}

/**
 * 
 */
export class MemberPromptsApi extends runtime.BaseAPI {

    /**
     * Create a new prompt for the current member
     */
    async createPromptRaw(requestParameters: CreatePromptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MemberPrompt>> {
        if (requestParameters['createMemberPrompt'] == null) {
            throw new runtime.RequiredError(
                'createMemberPrompt',
                'Required parameter "createMemberPrompt" was null or undefined when calling createPrompt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/prompts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMemberPromptToJSON(requestParameters['createMemberPrompt']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberPromptFromJSON(jsonValue));
    }

    /**
     * Create a new prompt for the current member
     */
    async createPrompt(createMemberPrompt: CreateMemberPrompt, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MemberPrompt> {
        const response = await this.createPromptRaw({ createMemberPrompt: createMemberPrompt }, initOverrides);
        return await response.value();
    }

    /**
     * Delete all prompts for the current member
     */
    async deleteAllPromptsForMemberRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/prompts/all`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete all prompts for the current member
     */
    async deleteAllPromptsForMember(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAllPromptsForMemberRaw(initOverrides);
    }

    /**
     * Delete a prompt
     */
    async deletePromptRaw(requestParameters: DeletePromptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['promptId'] == null) {
            throw new runtime.RequiredError(
                'promptId',
                'Required parameter "promptId" was null or undefined when calling deletePrompt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/prompts/{promptId}`.replace(`{${"promptId"}}`, encodeURIComponent(String(requestParameters['promptId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a prompt
     */
    async deletePrompt(promptId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePromptRaw({ promptId: promptId }, initOverrides);
    }

    /**
     * Get a specific prompt by ID
     */
    async getPromptByIdRaw(requestParameters: GetPromptByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MemberPrompt>> {
        if (requestParameters['promptId'] == null) {
            throw new runtime.RequiredError(
                'promptId',
                'Required parameter "promptId" was null or undefined when calling getPromptById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/prompts/{promptId}`.replace(`{${"promptId"}}`, encodeURIComponent(String(requestParameters['promptId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberPromptFromJSON(jsonValue));
    }

    /**
     * Get a specific prompt by ID
     */
    async getPromptById(promptId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MemberPrompt> {
        const response = await this.getPromptByIdRaw({ promptId: promptId }, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific prompt by name
     */
    async getPromptByNameRaw(requestParameters: GetPromptByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MemberPrompt>> {
        if (requestParameters['promptName'] == null) {
            throw new runtime.RequiredError(
                'promptName',
                'Required parameter "promptName" was null or undefined when calling getPromptByName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/prompts/by-name/{promptName}`.replace(`{${"promptName"}}`, encodeURIComponent(String(requestParameters['promptName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberPromptFromJSON(jsonValue));
    }

    /**
     * Get a specific prompt by name
     */
    async getPromptByName(promptName: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MemberPrompt> {
        const response = await this.getPromptByNameRaw({ promptName: promptName }, initOverrides);
        return await response.value();
    }

    /**
     * Get all prompts for the current member
     */
    async getPromptsForMemberRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MemberPrompt>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/prompts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MemberPromptFromJSON));
    }

    /**
     * Get all prompts for the current member
     */
    async getPromptsForMember(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MemberPrompt>> {
        const response = await this.getPromptsForMemberRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update a prompt
     */
    async updatePromptRaw(requestParameters: UpdatePromptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MemberPrompt>> {
        if (requestParameters['promptId'] == null) {
            throw new runtime.RequiredError(
                'promptId',
                'Required parameter "promptId" was null or undefined when calling updatePrompt().'
            );
        }

        if (requestParameters['updateMemberPrompt'] == null) {
            throw new runtime.RequiredError(
                'updateMemberPrompt',
                'Required parameter "updateMemberPrompt" was null or undefined when calling updatePrompt().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/prompts/{promptId}`.replace(`{${"promptId"}}`, encodeURIComponent(String(requestParameters['promptId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMemberPromptToJSON(requestParameters['updateMemberPrompt']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberPromptFromJSON(jsonValue));
    }

    /**
     * Update a prompt
     */
    async updatePrompt(promptId: string, updateMemberPrompt: UpdateMemberPrompt, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MemberPrompt> {
        const response = await this.updatePromptRaw({ promptId: promptId, updateMemberPrompt: updateMemberPrompt }, initOverrides);
        return await response.value();
    }

}
