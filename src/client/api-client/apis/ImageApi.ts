/* tslint:disable */
/* eslint-disable */
/**
 * AI API
 * API to manage to interact with AI
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GenerateAiImageRequest,
  GenerateAiImageResponse,
  GenerateAndReturnAiImageResponse,
  PagedImages,
  PollImageStatusResponse,
  UpscaleImageRequest,
} from '../models/index';
import {
    GenerateAiImageRequestFromJSON,
    GenerateAiImageRequestToJSON,
    GenerateAiImageResponseFromJSON,
    GenerateAiImageResponseToJSON,
    GenerateAndReturnAiImageResponseFromJSON,
    GenerateAndReturnAiImageResponseToJSON,
    PagedImagesFromJSON,
    PagedImagesToJSON,
    PollImageStatusResponseFromJSON,
    PollImageStatusResponseToJSON,
    UpscaleImageRequestFromJSON,
    UpscaleImageRequestToJSON,
} from '../models/index';

export interface DeleteImageRequest {
    imageFileName: string;
}

export interface GenerateAiImageOperationRequest {
    generateAiImageRequest: GenerateAiImageRequest;
}

export interface GenerateAndReturnImageRequest {
    generateAiImageRequest: GenerateAiImageRequest;
}

export interface GetPagedImagesRequest {
    pageNumber: number;
    numberOfImagesPerPage: number;
}

export interface PollImageStatusRequest {
    promptId: string;
}

export interface UpscaleImageOperationRequest {
    upscaleImageRequest: UpscaleImageRequest;
}

/**
 * 
 */
export class ImageApi extends runtime.BaseAPI {

    /**
     * Delete an image
     */
    async deleteImageRaw(requestParameters: DeleteImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['imageFileName'] == null) {
            throw new runtime.RequiredError(
                'imageFileName',
                'Required parameter "imageFileName" was null or undefined when calling deleteImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/image/{imageFileName}`.replace(`{${"imageFileName"}}`, encodeURIComponent(String(requestParameters['imageFileName']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an image
     */
    async deleteImage(imageFileName: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteImageRaw({ imageFileName: imageFileName }, initOverrides);
    }

    /**
     * Have ai generate an image.  Store entry in image table, so the image is returned from all images endpoint.
     */
    async generateAiImageRaw(requestParameters: GenerateAiImageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerateAiImageResponse>> {
        if (requestParameters['generateAiImageRequest'] == null) {
            throw new runtime.RequiredError(
                'generateAiImageRequest',
                'Required parameter "generateAiImageRequest" was null or undefined when calling generateAiImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/image/generateAiImage`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateAiImageRequestToJSON(requestParameters['generateAiImageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerateAiImageResponseFromJSON(jsonValue));
    }

    /**
     * Have ai generate an image.  Store entry in image table, so the image is returned from all images endpoint.
     */
    async generateAiImage(generateAiImageRequest: GenerateAiImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerateAiImageResponse> {
        const response = await this.generateAiImageRaw({ generateAiImageRequest: generateAiImageRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Have AI generate an image and return it directly.  No db involved.
     */
    async generateAndReturnImageRaw(requestParameters: GenerateAndReturnImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerateAndReturnAiImageResponse>> {
        if (requestParameters['generateAiImageRequest'] == null) {
            throw new runtime.RequiredError(
                'generateAiImageRequest',
                'Required parameter "generateAiImageRequest" was null or undefined when calling generateAndReturnImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/image/generateAndReturnImage`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateAiImageRequestToJSON(requestParameters['generateAiImageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerateAndReturnAiImageResponseFromJSON(jsonValue));
    }

    /**
     * Have AI generate an image and return it directly.  No db involved.
     */
    async generateAndReturnImage(generateAiImageRequest: GenerateAiImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerateAndReturnAiImageResponse> {
        const response = await this.generateAndReturnImageRaw({ generateAiImageRequest: generateAiImageRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Get paged images for the current member
     */
    async getPagedImagesRaw(requestParameters: GetPagedImagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedImages>> {
        if (requestParameters['pageNumber'] == null) {
            throw new runtime.RequiredError(
                'pageNumber',
                'Required parameter "pageNumber" was null or undefined when calling getPagedImages().'
            );
        }

        if (requestParameters['numberOfImagesPerPage'] == null) {
            throw new runtime.RequiredError(
                'numberOfImagesPerPage',
                'Required parameter "numberOfImagesPerPage" was null or undefined when calling getPagedImages().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['numberOfImagesPerPage'] != null) {
            queryParameters['numberOfImagesPerPage'] = requestParameters['numberOfImagesPerPage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/image/paged`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedImagesFromJSON(jsonValue));
    }

    /**
     * Get paged images for the current member
     */
    async getPagedImages(pageNumber: number, numberOfImagesPerPage: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedImages> {
        const response = await this.getPagedImagesRaw({ pageNumber: pageNumber, numberOfImagesPerPage: numberOfImagesPerPage }, initOverrides);
        return await response.value();
    }

    /**
     * Poll the status of an ai image that is being created. Updates the db if image name is returned.
     */
    async pollImageStatusRaw(requestParameters: PollImageStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PollImageStatusResponse>> {
        if (requestParameters['promptId'] == null) {
            throw new runtime.RequiredError(
                'promptId',
                'Required parameter "promptId" was null or undefined when calling pollImageStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/image/prompt/{promptId}`.replace(`{${"promptId"}}`, encodeURIComponent(String(requestParameters['promptId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PollImageStatusResponseFromJSON(jsonValue));
    }

    /**
     * Poll the status of an ai image that is being created. Updates the db if image name is returned.
     */
    async pollImageStatus(promptId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PollImageStatusResponse> {
        const response = await this.pollImageStatusRaw({ promptId: promptId }, initOverrides);
        return await response.value();
    }

    /**
     * Have ai upscale an existing image.  Store entry in image table, so the image is returned from all images endpoint.
     */
    async upscaleImageRaw(requestParameters: UpscaleImageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerateAiImageResponse>> {
        if (requestParameters['upscaleImageRequest'] == null) {
            throw new runtime.RequiredError(
                'upscaleImageRequest',
                'Required parameter "upscaleImageRequest" was null or undefined when calling upscaleImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/image/upscaleImage`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpscaleImageRequestToJSON(requestParameters['upscaleImageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerateAiImageResponseFromJSON(jsonValue));
    }

    /**
     * Have ai upscale an existing image.  Store entry in image table, so the image is returned from all images endpoint.
     */
    async upscaleImage(upscaleImageRequest: UpscaleImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerateAiImageResponse> {
        const response = await this.upscaleImageRaw({ upscaleImageRequest: upscaleImageRequest }, initOverrides);
        return await response.value();
    }

}
