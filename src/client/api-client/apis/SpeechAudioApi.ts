/* tslint:disable */
/* eslint-disable */
/**
 * AI API
 * API to manage to interact with AI
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TextToSpeechRequest,
} from '../models/index';
import {
    TextToSpeechRequestFromJSON,
    TextToSpeechRequestToJSON,
} from '../models/index';

export interface SpeechToTextRequest {
    file?: Blob;
    language?: string;
}

export interface TextToSpeechOperationRequest {
    textToSpeechRequest: TextToSpeechRequest;
}

export interface TextToSpeechStreamingRequest {
    text: string;
    speed?: any;
    responseFormat?: any;
    voice?: any;
    model?: any;
}

/**
 * 
 */
export class SpeechAudioApi extends runtime.BaseAPI {

    /**
     * Upload audio file for transcription (non-streaming)
     */
    async speechToTextRaw(requestParameters: SpeechToTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        if (requestParameters['language'] != null) {
            formParams.append('language', requestParameters['language'] as any);
        }

        const response = await this.request({
            path: `/speech-audio/speechToText`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Upload audio file for transcription (non-streaming)
     */
    async speechToText(file?: Blob, language?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.speechToTextRaw({ file: file, language: language }, initOverrides);
        return await response.value();
    }

    /**
     * Cancel ongoing audio processing
     */
    async stopTextToSpeechRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/speech-audio/stopTextToSpeech`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Cancel ongoing audio processing
     */
    async stopTextToSpeech(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stopTextToSpeechRaw(initOverrides);
    }

    /**
     * Convert text to speech (non-streaming)
     */
    async textToSpeechRaw(requestParameters: TextToSpeechOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['textToSpeechRequest'] == null) {
            throw new runtime.RequiredError(
                'textToSpeechRequest',
                'Required parameter "textToSpeechRequest" was null or undefined when calling textToSpeech().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/speech-audio/textToSpeech`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TextToSpeechRequestToJSON(requestParameters['textToSpeechRequest']),
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Convert text to speech (non-streaming)
     */
    async textToSpeech(textToSpeechRequest: TextToSpeechRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.textToSpeechRaw({ textToSpeechRequest: textToSpeechRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Convert text to speech and stream audio back
     */
    async textToSpeechStreamingRaw(requestParameters: TextToSpeechStreamingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['text'] == null) {
            throw new runtime.RequiredError(
                'text',
                'Required parameter "text" was null or undefined when calling textToSpeechStreaming().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['text'] != null) {
            queryParameters['text'] = requestParameters['text'];
        }

        if (requestParameters['speed'] != null) {
            queryParameters['speed'] = requestParameters['speed'];
        }

        if (requestParameters['responseFormat'] != null) {
            queryParameters['responseFormat'] = requestParameters['responseFormat'];
        }

        if (requestParameters['voice'] != null) {
            queryParameters['voice'] = requestParameters['voice'];
        }

        if (requestParameters['model'] != null) {
            queryParameters['model'] = requestParameters['model'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/speech-audio/textToSpeechStreaming`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Convert text to speech and stream audio back
     */
    async textToSpeechStreaming(text: string, speed?: any, responseFormat?: any, voice?: any, model?: any, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.textToSpeechStreamingRaw({ text: text, speed: speed, responseFormat: responseFormat, voice: voice, model: model }, initOverrides);
        return await response.value();
    }

}
