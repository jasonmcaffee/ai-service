/* tslint:disable */
/* eslint-disable */
/**
 * AI API
 * API to manage to interact with AI
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChatInference,
} from '../models/index';
import {
    ChatInferenceFromJSON,
    ChatInferenceToJSON,
} from '../models/index';

export interface ChatControllerInferenceRequest {
    chatInference: ChatInference;
}

export interface ChatControllerStreamInferenceRequest {
    chatInference: ChatInference;
}

/**
 * 
 */
export class ChatApi extends runtime.BaseAPI {

    /**
     * Inference based on a prompt
     */
    async chatControllerInferenceRaw(requestParameters: ChatControllerInferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['chatInference'] == null) {
            throw new runtime.RequiredError(
                'chatInference',
                'Required parameter "chatInference" was null or undefined when calling chatControllerInference().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/chat/inference`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChatInferenceToJSON(requestParameters['chatInference']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Inference based on a prompt
     */
    async chatControllerInference(requestParameters: ChatControllerInferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.chatControllerInferenceRaw(requestParameters, initOverrides);
    }

    /**
     * Stream a message based on a prompt
     */
    async chatControllerStreamInferenceRaw(requestParameters: ChatControllerStreamInferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['chatInference'] == null) {
            throw new runtime.RequiredError(
                'chatInference',
                'Required parameter "chatInference" was null or undefined when calling chatControllerStreamInference().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/chat/streamInference`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChatInferenceToJSON(requestParameters['chatInference']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Stream a message based on a prompt
     */
    async chatControllerStreamInference(requestParameters: ChatControllerStreamInferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.chatControllerStreamInferenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
