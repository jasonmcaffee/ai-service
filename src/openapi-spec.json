{
  "openapi": "3.0.0",
  "paths": {
    "/chat/streamInference": {
      "get": {
        "operationId": "streamInference",
        "parameters": [
          {
            "name": "prompt",
            "required": true,
            "in": "query",
            "description": "The prompt to initiate the message stream",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conversationId",
            "required": false,
            "in": "query",
            "description": "Optional. The conversation to add the passed in prompt and llm response to.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "modelId",
            "required": false,
            "in": "query",
            "description": "The id of the model to use.  If not passed, the default model will be used.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shouldSearchWeb",
            "required": true,
            "in": "query",
            "description": "Indicator on weather to search the web.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "example": "data: { \"text\": \"response\", \"end\": \"true\" }"
                }
              }
            }
          }
        },
        "summary": "Stream a message based on a prompt",
        "tags": [
          "Chat"
        ]
      }
    },
    "/chat/stop": {
      "get": {
        "operationId": "stop",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "stop the current stream for a member",
        "tags": [
          "Chat"
        ]
      }
    },
    "/conversations/conversation/{conversationId}": {
      "get": {
        "operationId": "getConversation",
        "parameters": [
          {
            "name": "conversationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The conversation details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Conversation"
                }
              }
            }
          },
          "404": {
            "description": ""
          }
        },
        "summary": "Get conversation by ID",
        "tags": [
          "Conversation"
        ]
      },
      "put": {
        "operationId": "updateConversation",
        "parameters": [
          {
            "name": "conversationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The updated conversation object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Conversation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The conversation has been successfully updated."
          }
        },
        "summary": "Update an existing conversation",
        "tags": [
          "Conversation"
        ]
      },
      "delete": {
        "operationId": "deleteConversation",
        "parameters": [
          {
            "name": "conversationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The conversation has been successfully deleted."
          }
        },
        "summary": "Delete a conversation",
        "tags": [
          "Conversation"
        ]
      }
    },
    "/conversations/conversation": {
      "post": {
        "operationId": "createConversation",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "The conversation to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConversation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The conversation has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Conversation"
                }
              }
            }
          }
        },
        "summary": "Create a new conversation",
        "tags": [
          "Conversation"
        ]
      }
    },
    "/conversations/{conversationId}/messages/message": {
      "post": {
        "operationId": "addMessage",
        "parameters": [
          {
            "name": "conversationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The message was successfully added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        },
        "summary": "Add a message to a conversation",
        "tags": [
          "Conversation"
        ]
      }
    },
    "/conversations/conversations/member": {
      "get": {
        "operationId": "getConversationsForMember",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The conversation has been successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Conversation"
                  }
                }
              }
            }
          }
        },
        "summary": "get all conversations for a member",
        "tags": [
          "Conversation"
        ]
      }
    },
    "/conversations/conversation-name/{conversationId}/nameConversation": {
      "post": {
        "operationId": "nameConversation",
        "parameters": [
          {
            "name": "conversationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated conversation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Conversation"
                }
              }
            }
          }
        },
        "summary": "Have ai name the conversation",
        "tags": [
          "Conversation"
        ]
      }
    },
    "/conversations/getAutoCompleteSuggestions": {
      "post": {
        "operationId": "getAtAutoCompleteSuggestions",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAutoCompleteSuggestionsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Suggestion"
                  }
                }
              }
            }
          }
        },
        "summary": "Get auto complete suggestions based on partial text match.",
        "tags": [
          "Conversation"
        ]
      }
    },
    "/datasources/datasource": {
      "post": {
        "operationId": "createDatasource",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDatasource"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The datasource has been created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Datasource"
                }
              }
            }
          }
        },
        "summary": "Create a new datasource",
        "tags": [
          "Datasources"
        ]
      }
    },
    "/datasources/datasource/{datasourceId}/document": {
      "post": {
        "operationId": "createDocument",
        "parameters": [
          {
            "name": "datasourceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDocument"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The document has been created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          }
        },
        "summary": "Create a new document",
        "tags": [
          "Datasources"
        ]
      }
    },
    "/datasources/datasource/documents/{documentId}": {
      "get": {
        "operationId": "getDocumentById",
        "parameters": [
          {
            "name": "documentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The document details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            }
          },
          "404": {
            "description": "Document not found"
          }
        },
        "summary": "Get document by ID",
        "tags": [
          "Datasources"
        ]
      }
    },
    "/datasources/datasource/{datasourceId}": {
      "get": {
        "operationId": "getDatasourceById",
        "parameters": [
          {
            "name": "datasourceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datasource details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Datasource"
                }
              }
            }
          },
          "404": {
            "description": "Datasource not found"
          }
        },
        "summary": "Get datasource by ID",
        "tags": [
          "Datasources"
        ]
      },
      "delete": {
        "operationId": "deleteDatasource",
        "parameters": [
          {
            "name": "datasourceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "indication if deleted successfully"
          }
        },
        "summary": "deletes a datasource",
        "tags": [
          "Datasources"
        ]
      }
    },
    "/datasources/datasource/{datasourceId}/documents": {
      "get": {
        "operationId": "getDocumentsForDatasource",
        "parameters": [
          {
            "name": "datasourceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of documents for the datasource",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all documents for a datasource",
        "tags": [
          "Datasources"
        ]
      }
    },
    "/datasources/conversation/{conversationId}": {
      "get": {
        "operationId": "getDatasourcesForConversation",
        "parameters": [
          {
            "name": "conversationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of datasources for the conversation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Datasource"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all datasources for a conversation",
        "tags": [
          "Datasources"
        ]
      }
    },
    "/datasources/conversation/{conversationId}/documents": {
      "get": {
        "operationId": "getDocumentsForConversation",
        "parameters": [
          {
            "name": "conversationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of documents for the conversation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all documents for a conversation",
        "tags": [
          "Datasources"
        ]
      }
    },
    "/datasources/member": {
      "get": {
        "operationId": "getAllDatasourcesForMember",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of datasources owned by the member",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Datasource"
                  }
                }
              }
            }
          }
        },
        "summary": "get all datasources for a member",
        "tags": [
          "Datasources"
        ]
      }
    },
    "/datasources/datasource-types": {
      "get": {
        "operationId": "getDatasourceTypes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of datasource types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DatasourceType"
                  }
                }
              }
            }
          }
        },
        "summary": "deletes a datasource",
        "tags": [
          "Datasources"
        ]
      }
    },
    "/datasources/conversation/{conversationId}/datasource/{datasourceId}": {
      "post": {
        "operationId": "addDatasourceToConversation",
        "parameters": [
          {
            "name": "conversationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "datasourceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "add a datasource to a conversation.  all documents will be passed to the LLM as part of messages list",
        "tags": [
          "Datasources"
        ]
      },
      "delete": {
        "operationId": "deleteDatasourceFromConversation",
        "parameters": [
          {
            "name": "conversationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "datasourceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "remove a datasource from a conversation. no documents from the datasource will be passed to LLM as part of messages",
        "tags": [
          "Datasources"
        ]
      }
    },
    "/image/prompt/{promptId}": {
      "get": {
        "operationId": "pollImageStatus",
        "parameters": [
          {
            "name": "promptId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The image name",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PollImageStatusResponse"
                }
              }
            }
          },
          "404": {
            "description": ""
          }
        },
        "summary": "Poll the status of an ai image that is being created. Updates the db if image name is returned.",
        "tags": [
          "Image"
        ]
      }
    },
    "/image/generateAiImage": {
      "post": {
        "operationId": "generateAiImage",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Params to create the image.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateAiImageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Prompt id to poll for image status, then get the image name.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateAiImageResponse"
                }
              }
            }
          }
        },
        "summary": "Have ai generate an image.  Store entry in image table, so the image is returned from all images endpoint.",
        "tags": [
          "Image"
        ]
      }
    },
    "/image/generateAndReturnImage": {
      "post": {
        "operationId": "generateAndReturnImage",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Params to create the image.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateAiImageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the generated image directly",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateAndReturnAiImageResponse"
                }
              }
            }
          }
        },
        "summary": "Have AI generate an image and return it directly.  No db involved.",
        "tags": [
          "Image"
        ]
      }
    },
    "/image/paged": {
      "get": {
        "operationId": "getPagedImages",
        "parameters": [
          {
            "name": "pageNumber",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "numberOfImagesPerPage",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paged list of images",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedImages"
                }
              }
            }
          }
        },
        "summary": "Get paged images for the current member",
        "tags": [
          "Image"
        ]
      }
    },
    "/image/{imageFileName}": {
      "delete": {
        "operationId": "deleteImage",
        "parameters": [
          {
            "name": "imageFileName",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The image has been deleted"
          },
          "404": {
            "description": "Image not found"
          }
        },
        "summary": "Delete an image",
        "tags": [
          "Image"
        ]
      }
    },
    "/image/upscaleImage": {
      "post": {
        "operationId": "upscaleImage",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Params to upscale the image.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpscaleImageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Prompt id to poll for image status, then get the image name.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateAiImageResponse"
                }
              }
            }
          }
        },
        "summary": "Have ai upscale an existing image.  Store entry in image table, so the image is returned from all images endpoint.",
        "tags": [
          "Image"
        ]
      }
    },
    "/models/model-types": {
      "get": {
        "operationId": "getModelTypes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of model types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModelType"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all model types",
        "tags": [
          "Models"
        ]
      }
    },
    "/models/{modelId}": {
      "get": {
        "operationId": "getModelById",
        "parameters": [
          {
            "name": "modelId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The model details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Model"
                }
              }
            }
          },
          "404": {
            "description": ""
          }
        },
        "summary": "Get model by ID",
        "tags": [
          "Models"
        ]
      },
      "put": {
        "operationId": "updateModel",
        "parameters": [
          {
            "name": "modelId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The updated model object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The model has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Model"
                }
              }
            }
          }
        },
        "summary": "Update an existing model",
        "tags": [
          "Models"
        ]
      },
      "delete": {
        "operationId": "deleteModel",
        "parameters": [
          {
            "name": "modelId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The model has been successfully deleted."
          }
        },
        "summary": "Delete a model",
        "tags": [
          "Models"
        ]
      }
    },
    "/models": {
      "get": {
        "operationId": "getAllModelsForMember",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of models",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Model"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all models for the authenticated member",
        "tags": [
          "Models"
        ]
      },
      "post": {
        "operationId": "createModel",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "The model to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The model has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Model"
                }
              }
            }
          }
        },
        "summary": "Create a new model",
        "tags": [
          "Models"
        ]
      }
    },
    "/openapi": {
      "get": {
        "operationId": "getOpenApiSpec",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "OpenApi"
        ]
      }
    },
    "/webSearch/search": {
      "get": {
        "operationId": "webSearch",
        "parameters": [
          {
            "name": "query",
            "required": true,
            "in": "query",
            "description": "search terms",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startingPage",
            "required": true,
            "in": "query",
            "description": "page to start on. e.g. 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "maxPages",
            "required": true,
            "in": "query",
            "description": "number of pages to retrieve.",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResultResponse"
                }
              }
            }
          }
        },
        "summary": "search the web",
        "tags": [
          "WebSearch"
        ]
      }
    },
    "/webSearch/streamWebSearch": {
      "get": {
        "operationId": "streamWebSearch",
        "parameters": [
          {
            "name": "query",
            "required": true,
            "in": "query",
            "description": "Search query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startingPage",
            "required": true,
            "in": "query",
            "description": "page to start on. e.g. 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "maxPages",
            "required": true,
            "in": "query",
            "description": "number of pages to retrieve.",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "example": "data: { \n                        \"searchResults\": [{\n                            \"url\": \"http://example.com\",\n                            \"title\": \"Example dot com\",\n                            \"blurb\": \"Some example stuff\",\n                        }], \n                        \"end\": \"true\" \n                      }"
                }
              }
            }
          }
        },
        "summary": "Stream a message based on a prompt",
        "tags": [
          "WebSearch"
        ]
      }
    },
    "/webSearch/getPageContents": {
      "get": {
        "operationId": "getPageContents",
        "parameters": [
          {
            "name": "url",
            "required": true,
            "in": "query",
            "description": "url to fetch",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "fetch the contents of the page.",
        "tags": [
          "WebSearch"
        ]
      }
    },
    "/webSearch/streamSummarizeUrl": {
      "get": {
        "operationId": "streamSummarizeUrl",
        "parameters": [
          {
            "name": "url",
            "required": true,
            "in": "query",
            "description": "Url to summarize",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchQueryContext",
            "required": false,
            "in": "query",
            "description": "context in which the url was originally fetched",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "example": "data: { \"text\": \"response\", \"end\": \"true\" }"
                }
              }
            }
          }
        },
        "summary": "Stream a summary based on url",
        "tags": [
          "WebSearch"
        ]
      }
    },
    "/webSearch/stopSummarizingUrl": {
      "get": {
        "operationId": "stopSummarizingUrl",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "stop the current stream for a member",
        "tags": [
          "WebSearch"
        ]
      }
    }
  },
  "info": {
    "title": "AI API",
    "description": "API to manage to interact with AI",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "schemas": {
      "ModelOrDatasource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ]
      },
      "MessageContext": {
        "type": "object",
        "properties": {
          "textWithoutTags": {
            "type": "string"
          },
          "originalText": {
            "type": "string"
          },
          "models": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModelOrDatasource"
            }
          },
          "datasources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModelOrDatasource"
            }
          }
        },
        "required": [
          "textWithoutTags",
          "originalText",
          "models",
          "datasources"
        ]
      },
      "Message": {
        "type": "object",
        "properties": {
          "messageId": {
            "type": "string"
          },
          "sentByMemberId": {
            "type": "string"
          },
          "messageText": {
            "type": "string"
          },
          "createdDate": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "messageContext": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageContext"
              }
            ]
          }
        },
        "required": [
          "messageId",
          "sentByMemberId",
          "messageText",
          "createdDate",
          "role",
          "messageContext"
        ]
      },
      "Document": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "createDate": {
            "type": "string"
          },
          "updatedDate": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "filePath": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "createDate",
          "updatedDate",
          "text",
          "metadata",
          "filePath"
        ]
      },
      "Datasource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "pathToChromaFile": {
            "type": "string"
          },
          "createdDate": {
            "type": "string"
          },
          "datasourceTypeId": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "documents": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document"
            }
          },
          "dateAddedToConversation": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "pathToChromaFile",
          "createdDate",
          "datasourceTypeId",
          "name",
          "documents",
          "dateAddedToConversation"
        ]
      },
      "Conversation": {
        "type": "object",
        "properties": {
          "conversationId": {
            "type": "string"
          },
          "conversationName": {
            "type": "string"
          },
          "createdDate": {
            "type": "string"
          },
          "messages": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          },
          "datasources": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Datasource"
            }
          }
        },
        "required": [
          "conversationId",
          "conversationName",
          "createdDate",
          "messages",
          "datasources"
        ]
      },
      "CreateConversation": {
        "type": "object",
        "properties": {
          "conversationName": {
            "type": "string"
          }
        },
        "required": [
          "conversationName"
        ]
      },
      "CreateMessage": {
        "type": "object",
        "properties": {
          "messageText": {
            "type": "string"
          },
          "role": {
            "type": "string"
          }
        },
        "required": [
          "messageText",
          "role"
        ]
      },
      "GetAutoCompleteSuggestionsRequest": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          }
        },
        "required": [
          "text"
        ]
      },
      "Suggestion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "type"
        ]
      },
      "CreateDatasource": {
        "type": "object",
        "properties": {
          "datasourceTypeId": {
            "type": "number"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "datasourceTypeId",
          "name"
        ]
      },
      "CreateDocument": {
        "type": "object",
        "properties": {
          "base64String": {
            "type": "string"
          },
          "fileName": {
            "type": "string"
          }
        },
        "required": [
          "base64String",
          "fileName"
        ]
      },
      "DatasourceType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "datasourceType": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "datasourceType"
        ]
      },
      "PollImageStatusResponse": {
        "type": "object",
        "properties": {
          "imageName": {
            "type": "string"
          }
        },
        "required": [
          "imageName"
        ]
      },
      "GenerateAiImageRequest": {
        "type": "object",
        "properties": {
          "height": {
            "type": "number"
          },
          "width": {
            "type": "number"
          },
          "prompt": {
            "type": "string"
          },
          "prefix": {
            "type": "string"
          }
        },
        "required": [
          "height",
          "width",
          "prompt",
          "prefix"
        ]
      },
      "GenerateAiImageResponse": {
        "type": "object",
        "properties": {
          "promptId": {
            "type": "string"
          }
        },
        "required": [
          "promptId"
        ]
      },
      "GenerateAndReturnAiImageResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string"
          },
          "mimeType": {
            "type": "string"
          },
          "promptId": {
            "type": "string"
          },
          "prompt": {
            "type": "string"
          }
        },
        "required": [
          "data",
          "mimeType",
          "promptId",
          "prompt"
        ]
      },
      "Image": {
        "type": "object",
        "properties": {
          "imageFileName": {
            "type": "string"
          },
          "promptUsedToCreateImage": {
            "type": "string"
          },
          "height": {
            "type": "number"
          },
          "width": {
            "type": "number"
          },
          "memberId": {
            "type": "string"
          },
          "createdDate": {
            "type": "string"
          },
          "promptId": {
            "type": "string"
          }
        },
        "required": [
          "imageFileName",
          "promptUsedToCreateImage",
          "height",
          "width",
          "memberId",
          "createdDate",
          "promptId"
        ]
      },
      "PagedImages": {
        "type": "object",
        "properties": {
          "pageNumber": {
            "type": "number"
          },
          "numberOfImagesPerPage": {
            "type": "number"
          },
          "remainingPages": {
            "type": "number"
          },
          "remainingImages": {
            "type": "number"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          }
        },
        "required": [
          "pageNumber",
          "numberOfImagesPerPage",
          "remainingPages",
          "remainingImages",
          "images"
        ]
      },
      "UpscaleImageRequest": {
        "type": "object",
        "properties": {
          "imageName": {
            "type": "string"
          }
        },
        "required": [
          "imageName"
        ]
      },
      "ModelType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "modelType": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "modelType"
        ]
      },
      "Model": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "apiKey": {
            "type": "string"
          },
          "modelName": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          },
          "modelTypeId": {
            "type": "number"
          },
          "initialMessage": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "displayName",
          "url",
          "apiKey",
          "modelName",
          "isDefault",
          "modelTypeId",
          "initialMessage"
        ]
      },
      "CreateModel": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "apiKey": {
            "type": "string"
          },
          "modelName": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          },
          "modelTypeId": {
            "type": "number"
          },
          "initialMessage": {
            "type": "string"
          }
        },
        "required": [
          "displayName",
          "url",
          "apiKey",
          "modelName",
          "isDefault",
          "modelTypeId",
          "initialMessage"
        ]
      },
      "UpdateModel": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "apiKey": {
            "type": "string"
          },
          "modelName": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          },
          "modelTypeId": {
            "type": "number"
          },
          "initialMessage": {
            "type": "string"
          }
        },
        "required": [
          "displayName",
          "url",
          "apiKey",
          "modelName",
          "isDefault",
          "modelTypeId",
          "initialMessage"
        ]
      },
      "SearchResult": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "blurb": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "url",
          "blurb"
        ]
      },
      "SearchResultResponse": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string"
          },
          "searchResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchResult"
            }
          }
        },
        "required": [
          "query",
          "searchResults"
        ]
      }
    }
  }
}